{#
/**
 * @file
 * Crypto Top Currencies Box template file.
 */
#}

{{ attach_library('crypto_react_coin_lists/crypto_react_coin_lists') }}

<div id="top_currency_box"></div>
<script type="text/jsx">
  class TopCurrencyBoxChart extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        error: null,
        isLoaded: false,
        items: []
      };
    }
    componentDidMount() {
      const tsym = "USD";
      const fsym = this.props.symbol;
      var self = this;
      var dataUrl = "https://min-api.cryptocompare.com/data/histoday?fsym="+fsym+"&tsym="+tsym+"&limit=100&api_key="+drupalSettings.crypto_api_key.api_key;
      fetch(dataUrl)
      .then(res => res.json())
      .then(
        (result) => {
           var seriesOptions = [], arr = [], close = [], seriesCounter = 0;
           jQuery.each(result.Data, function (kt, vt) {
	     close.push([Number(vt['time']*1000), Number(vt['close'])]);
           });
	   jQuery.each(close, function (key, value) {
             seriesOptions[0] = {
               name: 'Price',
               data: close,
               visible: true,
             };
	     seriesCounter += 1;
	     if (seriesCounter === close.length) {
	       Highcharts.stockChart(self.props.id, {
	         chart: {
		   height: 75,
		   spacing:[0, 0, 0, 0],
		   margin: [0, 0, 0, 0],
		   type: 'area'
		 },

		 title : {
		  text : null
		 },

   	         legend:   { enabled: false },
		 credits:   { enabled: false },
		 scrollbar: { enabled: false },
		 navigator: { enabled: false },
		 exporting: { enabled: false },
		 rangeSelector: { enabled: false },
		 tooltip: {
                  pointFormat: '<b>{point.y}</b><br/>{point.x:%b %d, %H:%M}',
                  valuePrefix: '$',
		 },

		 yAxis: {
		   labels: {
		     formatter: function () {
		     },
		   },
		   plotLines: [{
	             value: 0,
		     width: 0,
		     color: 'silver'
		   }],
		 },
		 plotOptions: {
		   series: {
                     lineWidth: 1,
		   },
		 },
		 series: seriesOptions
	      });
	    }
	  });
        },
        // Note: it's important to handle errors here
        // instead of a catch() block so that we don't swallow
        // exceptions from actual bugs in components.
        (error) => {
          this.setState({
            isLoaded: true,
            error
          });
        }
      );

    }

    render() {
      return (
        <div>
          <div id={this.props.id}> </div>
        </div>
      );
    }
  }

  class TopCurrencyBox extends React.Component {
    
    constructor(props) {
      super(props);
      this.state = {
        error: null,
        isLoaded: false,
        items: []
      };
    }

    componentDidMount() {
      fetch(drupalSettings.path.baseUrl+"api/top-coin-list?_format=json")
        .then(res => res.json())
        .then(
          (result) => {
            this.setState({
              isLoaded: true,
              items: result
            });
          },
          // Note: it's important to handle errors here
          // instead of a catch() block so that we don't swallow
          // exceptions from actual bugs in components.
          (error) => {
            this.setState({
              isLoaded: true,
              error
            });
          }
        )

    }
    render() {
      const { error, isLoaded, items } = this.state;
      if (error) {
        return <div>Error: {error.message}</div>;
      } else if (!isLoaded) {
        return <div className="text-center" id="loader"></div>;
      } else {
        return (
	  <div className="currency view view-top-currencies view-id-top_currencies">      
	    <div className="view-content">
	      <div className="views-view-grid horizontal cols-4 clearfix">
	        <div className="row row-eq-height mb-4 mt-4">
                {items.map((item,index) => (
	          <div className={"col-md-3 col-sm-6 col-xs-12 views-col col-"+ (index + 1)}>
	            <div className={"top_currencies coinbox_container coin coin_" + item.field_symbol} symbol={item.field_symbol}>
	              <div className="panel-heading">
	                <span className="pull-left">{item.field_symbol} - USD</span>
	                <span className="pull-right label-volume">Vol: {window.HTMLReactParser(item.field_volume)}</span>
	              </div>
	              <div className="panel-body">
	                <div className="trend-values">
	                  <span className="pull-left label-price">{window.HTMLReactParser(item.field_last)}{window.HTMLReactParser(item.field_change_24h_pct)}</span>
	                  <a className="pull-right" href="#">BUY NOW</a>
	                </div>
			<TopCurrencyBoxChart id={"top_currencies_" + item.field_symbol} className="top_currencies_chart" symbol={item.field_symbol} />
	              </div>
	              <div className="panel-footer highlight-up">
	                <table className="table">
	                  <tbody>
	                    <tr>
	                      <td>{window.HTMLReactParser(item.nothing)}</td>
	                      <td><span className="label-title">{window.HTMLReactParser(item.title)}</span></td>
	                      <td>{window.HTMLReactParser(item.field_market_cap)}</td>
	                    </tr>
	                  </tbody>
	                </table>
	              </div>
	            </div>
	          </div>
                ))}
		</div>
	      </div>
            </div>
	  </div>
        );
      }
    }
  }

  ReactDOM.render(
    <TopCurrencyBox />,
    document.getElementById('top_currency_box')
  );
</script>